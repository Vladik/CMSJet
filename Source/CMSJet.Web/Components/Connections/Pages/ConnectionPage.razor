@page "/connections/{id:guid}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject DialogService DialogService

@using CMSJet.Core.Models
@using CMSJet.Core.Data.Services
@inject IConnectionService ConnectionService

<PageTitle>@CurrentPageTitle</PageTitle>

<RadzenStack>
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Gap="4">
                <RadzenIcon Icon="electrical_services"></RadzenIcon>
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H1" class="rz-m-0">@CurrentPageTitle</RadzenText>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.End" Gap="1rem" Wrap="FlexWrap.Wrap">
                <RadzenProgressBarCircular Visible="@_isSaving" ProgressBarStyle="ProgressBarStyle.Primary" Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.ExtraSmall"/>
                <RadzenButton form="formCurrentConnection" ButtonType="ButtonType.Submit" Icon="save" Text="Save" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small" Disabled="_isSaving"/>
                <RadzenButton Icon="cancel" Text="Close" ButtonStyle="ButtonStyle.Primary"  Size="ButtonSize.Small" Click="@OnCloseAsync"/>
                <RadzenButton Visible="@(CurrentConnection.Id != Guid.Empty)" Icon="delete" Text="Delete" ButtonStyle="ButtonStyle.Danger"  Size="ButtonSize.Small" Click="@OnDeleteAsync" Disabled="_isSaving"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenTemplateForm id="formCurrentConnection" TItem="Connection" Data=@CurrentConnection Submit=@OnSaveAsync>
                <RadzenRow class="rz-mb-4">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenLabel Component="txtName" Text="Connection name"  class="rz-mb-1"/>
                        <RadzenTextBox Name="txtName" MaxLength="150" @bind-Value="@CurrentConnection.Name" Placeholder="Enter connection name" class="w-100"/>
                        <RadzenRequiredValidator Component="txtName" Text="Name is required!"/>
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow class="rz-mb-4">
                    <RadzenColumn Size="12" SizeMD="12">
                        <RadzenLabel Component="txtDescription" Text="Description" class="rz-mb-1"/>
                        <RadzenTextArea Name="txtDescription" MaxLength="500" Cols="30" Rows="5" @bind-Value="@CurrentConnection.Description" Placeholder="Enter description" class="w-100" />
                    </RadzenColumn>
                </RadzenRow>
            </RadzenTemplateForm>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>


@code {

    private bool _isSaving = false;

    [Parameter] public Guid Id { get; set; }
    [SupplyParameterFromForm] private Connection CurrentConnection { get; set; } = new();
    
    private string CurrentPageTitle => CurrentConnection?.Name ?? "Unnamed Connection";
    
    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            CurrentConnection = await ConnectionService.GetConnectionByIdAsync(Id) ?? new();

            if (CurrentConnection.Id == Guid.Empty)
                await NavigateToAsync("/notfound");
        }
    }

    private async Task OnSaveAsync()
    {
        await ShowSavingIndicatorAsync(true);

        try
        {
            if (CurrentConnection.Id == Guid.Empty)
            {
                var newId = await ConnectionService.AddConnectionAsync(CurrentConnection);
                await NavigateToAsync($"/connections/{newId}");
            }
            else
            {
                await ConnectionService.UpdateConnectionAsync(CurrentConnection);
            }
        }
        finally
        {
            await ShowSavingIndicatorAsync(false);
        }
    }

    private async Task OnCloseAsync() => await NavigateToAsync();

    private async Task OnDeleteAsync()
    {
        var result = await DialogService
            .Confirm("Are you sure you want to delete this connection?", "Delete Confirmation");
        if (result == true)
            await NavigateToAsync();
    }
    
    private async Task NavigateToAsync(string? route = null)
    {
        NavigationManager.NavigateTo(route ?? "/connections");
        await Task.CompletedTask;
    }

    private async Task ShowSavingIndicatorAsync(bool isSaving)
    {
        _isSaving = isSaving;
        StateHasChanged();
        if (isSaving)
            await Task.Delay(500);
    }
}