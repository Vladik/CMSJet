@page "/batches/edit/{id:guid}"
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@inject DialogService DialogService

@using System.Text.Json
@using CMSJet.Core.Models
@using CMSJet.Core.Data.Services
@inject IMigrationBatchService MigrationBatchService

<PageTitle>@CurrentPageTitle</PageTitle>

<RadzenStack>
    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Gap="4">
                <RadzenIcon Icon="list"></RadzenIcon>
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H1" class="rz-m-0">@CurrentPageTitle</RadzenText>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow>
        <RadzenColumn Size="12">
            <RadzenTemplateForm id="formCurrentBatch" TItem="MigrationBatch" Data="@CurrentBatch" Submit="@OnSaveAsync">

                <!-- Source Type Selection -->
                <RadzenRow class="rz-mb-4">
                    <RadzenColumn Size="12">
                        <RadzenLabel Text="Source Type" class="rz-mb-1"/>
                        <RadzenDropDown Name="ddlSourceType" Data="@AvailableSourceTypes" @bind-Value="@CurrentBatch.SourceType"
                                        Placeholder="Select a Source Type" Class="w-100"/>
                        <RadzenRequiredValidator Component="ddlSourceType" Text="Source Type is required!"/>
                    </RadzenColumn>
                </RadzenRow>

                <!-- Content Selection and Filtering -->
                <RadzenRow class="rz-mb-4">
                    <RadzenColumn Size="12">
                        <RadzenLabel Text="Filter Content Items" class="rz-mb-1"/>
                        <RadzenTextBox Name="txtContentFilter" Placeholder="Enter filter criteria" @bind-Value="@ContentFilter" @oninput="@OnContentFilterChanged" class="w-100"/>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow>
                    <RadzenColumn Size="12">
                        <RadzenDataList Data="@FilteredContentItems" TItem="ContentItem" AllowPaging="true" PageSize="10">
                            <Template Context="contentItem">
                                <RadzenCard Variant="Variant.Filled" Class="w-100 rz-shadow-0" Style="margin: 5px 0;">
                                    <RadzenRow>
                                        <RadzenColumn Size="12">
                                            <RadzenText TextStyle="TextStyle.Body2">@contentItem.Name</RadzenText>
                                        </RadzenColumn>
                                    </RadzenRow>
                                </RadzenCard>
                            </Template>
                        </RadzenDataList>
                    </RadzenColumn>
                </RadzenRow>

                <!-- Field Mappings -->
                <RadzenRow class="rz-mb-4">
                    <RadzenColumn Size="12">
                        <RadzenLabel Text="Field Mappings" class="rz-mb-1"/>
                        <RadzenGrid Data="@FieldMappings" TItem="FieldMapping" AllowPaging="true">
                            <Columns>
                                <RadzenGridColumn TItem="FieldMapping" Property="SourceField" Title="Source Field">
                                    <Template Context="field">
                                       
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="FieldMapping" Property="TargetField" Title="Target Field">
                                    <Template Context="field">
                                        
                                    </Template>
                                </RadzenGridColumn>
                            </Columns>
                        </RadzenGrid>
                        <RadzenButton Icon="add" Text="Add Field Mapping" Click="@OnAddFieldMapping" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"/>
                    </RadzenColumn>
                </RadzenRow>

                <!-- Rules and Transformations -->
                <RadzenRow class="rz-mb-4">
                    <RadzenColumn Size="12">
                        <RadzenLabel Text="Rules and Transformations" class="rz-mb-1"/>
                        <RadzenGrid Data="@Rules" TItem="MigrationRule" AllowPaging="true">
                            <Columns>
                                <RadzenGridColumn TItem="MigrationRule" Property="Condition" Title="Condition">
                                    <Template Context="rule">
                                        
                                    </Template>
                                </RadzenGridColumn>
                                <RadzenGridColumn TItem="MigrationRule" Property="Action" Title="Action">
                                    <Template Context="rule">
                                        
                                    </Template>
                                </RadzenGridColumn>
                            </Columns>
                        </RadzenGrid>
                        <RadzenButton Icon="add" Text="Add Rule" Click="@OnAddRule" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"/>
                    </RadzenColumn>
                </RadzenRow>

                <!-- Batch Priority -->
                <RadzenRow class="rz-mb-4">
                    <RadzenColumn Size="12">
                        <RadzenLabel Text="Priority" class="rz-mb-1"/>
                        <RadzenNumeric Name="txtPriority" @bind-Value="@CurrentBatch.Priority" Min="1" Max="100" Class="w-100"/>
                        <RadzenRequiredValidator Component="txtPriority" Text="Priority is required!"/>
                    </RadzenColumn>
                </RadzenRow>

                <RadzenRow>
                    <RadzenColumn Size="12">
                        <RadzenButton Icon="save" Text="Save Batch" Click="@OnSaveAsync" ButtonStyle="ButtonStyle.Primary" Size="ButtonSize.Small"/>
                        <RadzenButton Icon="cancel" Text="Cancel" ButtonStyle="ButtonStyle.Secondary" Size="ButtonSize.Small" Click="@OnCloseAsync"/>
                    </RadzenColumn>
                </RadzenRow>

            </RadzenTemplateForm>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    private bool _isSaving = false;
    private string ContentFilter = string.Empty;
    private string CurrentPageTitle => CurrentBatch?.SourceType ?? "New Batch";
    private List<string> AvailableSourceTypes = new() { "Article", "Product", "BlogPost", "Page" };
    private List<ContentItem> FilteredContentItems = new();
    private List<FieldMapping> FieldMappings = new();
    private List<MigrationRule> Rules = new();

    [Parameter] public Guid Id { get; set; }
    [SupplyParameterFromForm] private MigrationBatch CurrentBatch { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            CurrentBatch = await MigrationBatchService.GetBatchByIdAsync(Id) ?? new();
            FieldMappings = JsonSerializer.Deserialize<List<FieldMapping>>(CurrentBatch.FieldMappings?.RootElement.GetRawText() ?? "[]") ?? new();
            Rules = JsonSerializer.Deserialize<List<MigrationRule>>(CurrentBatch.Rules?.RootElement.GetRawText() ?? "[]") ?? new();
        }
    }

    async Task OnSaveAsync()
    {
        await ShowSavingIndicatorAsync(true);
        try
        {
            CurrentBatch.FieldMappings = JsonDocument.Parse(JsonSerializer.Serialize(FieldMappings));
            CurrentBatch.Rules = JsonDocument.Parse(JsonSerializer.Serialize(Rules));

            if (CurrentBatch.Id == Guid.Empty)
            {
                var newId = await MigrationBatchService.AddBatchAsync(CurrentBatch);
                await NavigateToAsync($"/batches/edit/{newId}");
            }
            else
            {
                await MigrationBatchService.UpdateBatchAsync(CurrentBatch);
            }
        }
        finally
        {
            await ShowSavingIndicatorAsync(false);
        }
    }

    async Task OnCloseAsync() => await NavigateToAsync("/");

    async Task NavigateToAsync(string? route = null)
    {
        NavigationManager.NavigateTo(route ?? "/");
        await Task.CompletedTask;
    }

    async Task ShowSavingIndicatorAsync(bool isSaving)
    {
        _isSaving = isSaving;
        StateHasChanged();
        if (isSaving)
            await Task.Delay(500);
    }

    private void OnContentFilterChanged(ChangeEventArgs e)
    {
        ContentFilter = e.Value?.ToString() ?? string.Empty;
        FilteredContentItems = string.IsNullOrWhiteSpace(ContentFilter)
            ? new List<ContentItem>()
            : new List<ContentItem> { new ContentItem { Name = "Demo Item 1" } };
    }

    private void OnAddFieldMapping() => FieldMappings.Add(new FieldMapping());

    private void OnAddRule() => Rules.Add(new MigrationRule());
}
